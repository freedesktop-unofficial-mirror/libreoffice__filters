
// ============================================================================

const sal_Int32 TOKEN_MASK      = static_cast< sal_Int32 >( (1 << NMSP_SHIFT) - 1 );
const sal_Int32 NMSP_MASK       = static_cast< sal_Int32 >( SAL_MAX_INT16 & ~TOKEN_MASK );

/** Returns the raw token identifier without namespace of the passed token. */
inline sal_Int32 getBaseToken( sal_Int32 nToken ) { return nToken & TOKEN_MASK; }

/** Returns the namespace without token identifier of the passed token. */
inline sal_Int32 getNamespace( sal_Int32 nToken ) { return nToken & NMSP_MASK; }


// defines for tokens with specific namespaces
#define OOX_TOKEN( token, namespace ) (::oox::XML_##token | ::oox::NMSP_##namespace)

#define A_TOKEN( token )        OOX_TOKEN( token, dml )
#define AX_TOKEN( token )       OOX_TOKEN( token, ax )
#define C_TOKEN( token )        OOX_TOKEN( token, dmlChart )
#define CDR_TOKEN( token )      OOX_TOKEN( token, dmlChartDr )
#define DGM_TOKEN( token )      OOX_TOKEN( token, dmlDiagram )
#define O_TOKEN( token )        OOX_TOKEN( token, vmlOffice )
#define PC_TOKEN( token )       OOX_TOKEN( token, packageContentTypes )
#define PPT_TOKEN( token )      OOX_TOKEN( token, ppt )
#define PR_TOKEN( token )       OOX_TOKEN( token, packageRel )
#define R_TOKEN( token )        OOX_TOKEN( token, officeRel )
#define VML_TOKEN( token )      OOX_TOKEN( token, vml )
#define VMLX_TOKEN( token )     OOX_TOKEN( token, vmlExcel )
#define XDR_TOKEN( token )      OOX_TOKEN( token, dmlSpreadDr )
#define XLS_TOKEN( token )      OOX_TOKEN( token, xls )
#define XM_TOKEN( token )       OOX_TOKEN( token, xm )
#define XML_TOKEN( token )      OOX_TOKEN( token, xml )

// ============================================================================

} // namespace oox

#endif
