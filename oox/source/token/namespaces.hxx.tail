
// ============================================================================

const sal_Int32 TOKEN_MASK          = static_cast< sal_Int32 >( (1 << NMSP_SHIFT) - 1 );
const sal_Int32 NMSP_MASK           = static_cast< sal_Int32 >( SAL_MAX_INT32 & ~TOKEN_MASK );

/** Returns the raw token identifier without namespace of the passed token. */
inline sal_Int32 getBaseToken( sal_Int32 nToken ) { return nToken & TOKEN_MASK; }

/** Returns the namespace without token identifier of the passed token. */
inline sal_Int32 getNamespace( sal_Int32 nToken ) { return nToken & NMSP_MASK; }

// defines for tokens with specific namespaces
#define A_TOKEN( token )            (::oox::NMSP_dml | XML_##token)
#define AX_TOKEN( token )           (::oox::NMSP_ax | XML_##token)
#define C_TOKEN( token )            (::oox::NMSP_dmlChart | XML_##token)
#define CDR_TOKEN( token )          (::oox::NMSP_dmlChartDr | XML_##token)
#define DGM_TOKEN( token )          (::oox::NMSP_dmlDiagram | XML_##token)
#define O_TOKEN( token )            (::oox::NMSP_vmlOffice | XML_##token)
#define PC_TOKEN( token )           (::oox::NMSP_packageContentTypes | XML_##token)
#define PPT_TOKEN( token )          (::oox::NMSP_ppt | XML_##token)
#define PR_TOKEN( token )           (::oox::NMSP_packageRel | XML_##token)
#define R_TOKEN( token )            (::oox::NMSP_officeRel | XML_##token)
#define VML_TOKEN( token )          (::oox::NMSP_vml | XML_##token)
#define VMLX_TOKEN( token )         (::oox::NMSP_vmlExcel | XML_##token)
#define XDR_TOKEN( token )          (::oox::NMSP_dmlSpreadDr | XML_##token)
#define XLS_TOKEN( token )          (::oox::NMSP_xls | XML_##token)
#define XM_TOKEN( token )           (::oox::NMSP_xm | XML_##token)
#define XML_TOKEN( token )          (::oox::NMSP_xml | XML_##token)

// ============================================================================

} // namespace oox

#endif
