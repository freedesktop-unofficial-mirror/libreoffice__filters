<?xml version="1.0" encoding="UTF-8"?>
<!--
 #*************************************************************************
 #
 #   OpenOffice.org - a multi-platform office productivity suite
 #
 #   $RCSfile: build.xml,v $
 #
 #   $Revision: 1.5 $
 #
 #   last change: $Author: ihi $ $Date: 2006-08-01 13:43:18 $
 #
 #   The Contents of this file are made available subject to
 #   the terms of GNU Lesser General Public License Version 2.1.
 #
 #
 #     GNU Lesser General Public License Version 2.1
 #     =============================================
 #     Copyright 2005 by Sun Microsystems, Inc.
 #     901 San Antonio Road, Palo Alto, CA 94303, USA
 #
 #     This library is free software; you can redistribute it and/or
 #     modify it under the terms of the GNU Lesser General Public
 #     License version 2.1, as published by the Free Software Foundation.
 #
 #     This library is distributed in the hope that it will be useful,
 #     but WITHOUT ANY WARRANTY; without even the implied warranty of
 #     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 #     Lesser General Public License for more details.
 #
 #     You should have received a copy of the GNU Lesser General Public
 #     License along with this library; if not, write to the Free Software
 #     Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 #     MA  02111-1307  USA
 #
 #*************************************************************************
 -->
<project name="xmrg_jooxu_registry" default="main" basedir=".">

    <!-- ================================================================= -->
    <!-- settings                                                          -->
    <!-- ================================================================= -->

    <!-- project prefix, used for targets and build.lst  -->
    <property name="prj.prefix" value="xmrg"/>

    <!-- name of this sub target used in recursive builds -->
    <property name="target" value="xmrg_jooxu_registry"/>

    <!-- relative path to project directory -->
    <property name="prj" value="../../../../../.."/>

    <!-- start of java source code package structure -->
    <property name="java.dir" value="${prj}/java"/>

    <!-- path component for current java package -->
    <property name="package" value="org/openoffice/xmerge/util/registry"/>

    <!-- define how to handle CLASSPATH environment -->
    <property name="build.sysclasspath" value="ignore"/>

    <property environment="env"/>
    <property name="env.XML_APIS_JAR" value="${solar.jar}/xml-apis.jar"/>
    <property name="env.XERCES_JAR" value="${solar.jar}/xercesImpl.jar"/>

    <!-- classpath settings for javac tasks -->
    <path id="classpath">
        <pathelement location="${build.class}"/>
        <pathelement location="${env.XML_APIS_JAR}"/>
        <pathelement location="${env.XERCES_JAR}"/>
    </path>

    <!-- set whether we want to compile with or without deprecation -->
    <property name="deprecation" value="on"/>

    <!-- ================================================================= -->
    <!--  solar build environment targets                                  -->
    <!-- ================================================================= -->

    <target name="build_dir" unless="build.dir">
        <property name="build.dir" value="${out}"/>
    </target>

    <target name="solar" depends="build_dir" if="solar.update">
        <property name="solar.properties"
                  value="${solar.bin}/solar.properties"/>
    </target>

    <target name="init" depends="solar">
        <property name="build.compiler" value="classic"/>
        <property file="${solar.properties}"/>
        <property file="${build.dir}/class/solar.properties"/>
    </target>

    <target name="info">
        <echo message="--------------------"/>
        <echo message="${target}"/>
        <echo message="--------------------"/>
    </target>


    <!-- ================================================================= -->
    <!-- custom targets                                                    -->
    <!-- ================================================================= -->

    <!-- the main target, called in recursive builds -->
    <target name="main" depends="info,prepare,compile"/>

    <!-- prepare output directories -->
    <target name="prepare" depends="init" if="build.class">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.class}"/>
    </target>

    <!-- compile java sources in ${package} -->
    <target name="compile" depends="prepare" if="build.class">
        <javac srcdir="${java.dir}"
               destdir="${build.class}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}">
            <classpath refid="classpath"/>
            <include name="${package}/ConverterInfo.java"/>
            <include name="${package}/ConverterInfoMgr.java"/>
            <include name="${package}/ConverterInfoReader.java"/>
            <include name="${package}/RegistryException.java"/>
            <include name="${package}/UnoBridgeConverterInfo.java"/>
        </javac>
    </target>

    <!-- clean up -->
    <target name="clean" depends="prepare">
        <delete includeEmptyDirs="true">
            <fileset dir="${build.class}">
                <patternset>
                    <include name="${package}/*.class"/>
                </patternset>
            </fileset>
        </delete>
    </target>
     
</project>

